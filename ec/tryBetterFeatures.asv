% gabor feature extractor implemented by 
% Andrew Otto (2020). 
% Gabor Filter Bank (2D) (https://www.mathworks.com/matlabcentral/fileexchange/71348-gabor-filter-bank-2d), 
% MATLAB Central File Exchange. Retrieved March 14, 2020.



traintest = load('../data/traintest.mat');
trainImageNames = traintest.train_imagenames;
alpha = 50;
K = 40716;

% extract gabor features
% n_scales = 5;
% n_orients = 8;
% r = 39;
% c = 39;
% gaborArray = gaborFilterBank(n_scales, n_orients, r, c);

% features = zeros(length(trainImageNames), K);
% addpath('../matlab');
% for i = 1:length(trainImageNames)
%     disp(i/length(trainImageNames))
%     img = imread(strcat('../data/', traintest.train_imagenames{i}));
%     feature = gaborFeatures(img,gaborArray,4,4);
%     feature = feature(1:K);
%     features(i, :) = feature;
% end
% save('gaborFeatures.mat', 'features');

% features = load('gaborFeatures.mat');
% features = features.features;

% extract HOG features
features = zeros(length(trainImageNames), K);
addpath('../matlab');
boundaries = zeros(K+1, 1);
for k = 2:K+1
    boundaries(k) = (k-1)/K;
end
for i = 1:length(trainImageNames)
    disp(i/length(trainImageNames))
    img = imread(strcat('../data/', traintest.train_imagenames{i}));
    normalizedFeature = zeros(K, 1);
    feature = normalizedFeature(img);
    for k = 1:K
        normalizedFeature(k) = sum(boundaries(k) < hog & hog < boundaries(k+1));
    end
    normalizedFeature = normalizedFeature ./ sum(feature);
%     size(feature)
%     break;
    features(i, :) = feature;
end
save('hogFeatures.mat', 'features');

% features = load('hogFeatures.mat');
% features = features.features;

% evaluate on SVM

featureRes = zeros(length(traintest.test_imagenames), K);
testImagenames = traintest.test_imagenames;

addpath('../matlab');
addpath('./libsvm-3.24/matlab');

for i = 1:length(testImagenames)
    disp(i/length(testImagenames))

    img = imread(strcat('../data/', testImagenames{i}));
%     feature = gaborFeatures(img,gaborArray,4,4);
    feature = extractHOGFeatures(img);
    feature = feature(1:K);
    featureRes(i, :) = feature;
end
trainFeatures = features;
trainLabels = transpose(traintest.train_labels);
disp('svm with linear kernel')
linearSvm = svmtrain(trainLabels, trainFeatures,  '-t 2 -q');
svmpredict(traintest.test_labels', featureRes, linearSvm);

function [dictionary] = getGaborDictionary(imgPaths, alpha, K, method, gobarFilters)
    filterBank = gobarFilters;
    pixelResponses = zeros(alpha * length(imgPaths), 3 * length(filterBank));
    imgPaths = string(imgPaths);
    for i = 1:length(imgPaths)
        disp(strcat('progress: ', string(i/length(imgPaths))));
        imgPath = strcat('../data/', imgPaths(i));
        img = imread(imgPath);
         [~, ~, channelNum] = size(img);
        % only rgb images can be processed
        if channelNum == 1
            img = cat(3, img, img, img);
        end
        filterResponses = extractFilterResponses(img, filterBank);
        if strcmp(method, 'random')
            points = getRandomPoints(img, alpha);
        else
            points = getHarrisPoints(img, alpha, 0.06);
        end
        for pixelIdx = 1:alpha
            pixelResponses(alpha*(i-1)+pixelIdx, :) = filterResponses(points(pixelIdx, 1), points(pixelIdx, 2), :);
        end
    end
    [~, dictionary] = kmeans(pixelResponses, K, 'EmptyAction', 'drop');
end